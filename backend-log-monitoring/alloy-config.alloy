// ────────────────────────────────
// Loki 설정 블록
// ────────────────────────────────
loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
    // ▶ 로그를 Loki로 전송할 때 사용할 엔드포인트
    //   (여기서 'loki'는 docker-compose의 서비스 이름과 동일해야 함)
    //   내부 네트워크 상에서 Alloy → Loki 간 HTTP 통신 수행
  }
}

// ────────────────────────────────
// 로컬 파일 로그 수집 설정
// ────────────────────────────────
local.file_match "backend_logs" {
  path_targets = [{
    __path__ = "/app/logs/*.log",
    // ▶ 수집 대상 로그 파일 경로 패턴
    //   (backend 컨테이너의 /app/logs/*.log 를 읽음)
  }]
  // ▶ Alloy는 이 설정을 통해 로컬 파일을 "타겟"으로 인식함
}

// ────────────────────────────────
// 파일 소스 정의 (로그 수집 단계)
// ────────────────────────────────
loki.source.file "backend_logs" {
  targets    = local.file_match.backend_logs.targets
  // ▶ 위에서 정의한 file_match의 타겟을 사용
  forward_to = [loki.process.backend_logs.receiver]
  // ▶ 다음 단계인 'loki.process' 블록으로 로그를 전달
}

// ────────────────────────────────
// 로그 처리 파이프라인 정의 (JSON 파싱 및 라벨 추가)
// ────────────────────────────────
loki.process "backend_logs" {

  // ── ① JSON 파싱 단계 ────────────────────────
  stage.json {
    expressions = {
      level  = "level",  // ▶ 로그의 'level' 필드 추출 (예: INFO, ERROR)
      app    = "app",    // ▶ 로그의 'app' 필드 추출 (예: backend-app)
      // ※ 필요한 경우 timestamp, message 등 추가 가능
    }
  }

  // ── ② 라벨 추가 단계 ────────────────────────
  stage.labels {
    values = {
      level = "level",   // ▶ level 값을 Loki 라벨로 추가
      app   = "app",     // ▶ app 값을 Loki 라벨로 추가
    }
  }

  // ── ③ Loki로 전송 ─────────────────────────
  forward_to = [loki.write.default.receiver]
  // ▶ 처리된 로그를 Loki로 푸시
}
